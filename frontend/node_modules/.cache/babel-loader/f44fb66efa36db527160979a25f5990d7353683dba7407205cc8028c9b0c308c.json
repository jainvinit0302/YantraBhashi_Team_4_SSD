{"ast":null,"code":"class YantraBhashiValidator {\n  constructor() {\n    this.variables = new Map();\n    this.errors = [];\n    this.reservedWords = [\n      // Add your reserved words here if any\n    ];\n    this.DATA_TYPES = ['ANKHE', 'VARTTAI'];\n  }\n  preprocessCode(code) {\n    return code.split('\\n').map(line => line.trim()).filter(line => line && !line.startsWith('#')).map(line => line.replace(/^\\d+\\.\\s*/, '')); // Strip line numbers like \"1. \"\n  }\n  validate(code) {\n    this.variables.clear();\n    this.errors = [];\n    const lines = this.preprocessCode(code);\n    for (let i = 0; i < lines.length; i++) {\n      this.validateLine(lines[i], i + 1);\n    }\n    return {\n      isValid: this.errors.length === 0,\n      errors: this.errors\n    };\n  }\n  validateLine(line, lineNum) {\n    if (line.startsWith('PADAM ')) {\n      this.validateVariableDeclaration(line, lineNum);\n    } else if (line.startsWith('CHATIMPU(')) {\n      this.validatePrintStatement(line, lineNum);\n    } else if (line.startsWith('CHEPPU(')) {\n      this.validateInputStatement(line, lineNum);\n    } else if (line.startsWith('ELAITHE ')) {\n      this.validateConditional(line, lineNum);\n    } else if (line.startsWith('MALLI-MALLI ')) {\n      this.validateLoop(line, lineNum);\n    } else if (line.includes(' = ') && !line.startsWith('PADAM ')) {\n      this.validateAssignment(line, lineNum);\n    } else if (line === ']' || line === '] ALAITHE [') {\n      // Valid block markers - no error\n    } else if (line.trim() !== '') {\n      this.addError(lineNum, `Unknown statement: ${line}`);\n    }\n  }\n  validateVariableDeclaration(line, lineNum) {\n    const match = line.match(/^PADAM\\s+([a-zA-Z][a-zA-Z0-9_]*):([A-Z]+)(?:\\s*=\\s*(.+))?;?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid variable declaration syntax');\n      return;\n    }\n    const [, varName, dataType, initialValue] = match;\n    if (this.reservedWords.includes(varName)) {\n      this.addError(lineNum, `Cannot use reserved word '${varName}' as variable name`);\n      return;\n    }\n    if (!this.DATA_TYPES.includes(dataType)) {\n      this.addError(lineNum, `Invalid data type '${dataType}'. Use ANKHE for integers or VARTTAI for strings`);\n      return;\n    }\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'Variable declaration must end with semicolon');\n    }\n    this.variables.set(varName, {\n      type: dataType,\n      declared: true\n    });\n    if (typeof initialValue !== 'undefined') {\n      let trimmedVal = initialValue.trim();\n      if (trimmedVal.endsWith(';')) trimmedVal = trimmedVal.slice(0, -1).trim();\n      if (dataType === 'ANKHE' && !/^-?\\d+$/.test(trimmedVal)) {\n        this.addError(lineNum, 'ANKHE variables can only be assigned integer values');\n      }\n      if (dataType === 'VARTTAI') {\n        if (!(trimmedVal.startsWith('\"') && trimmedVal.endsWith('\"'))) {\n          this.addError(lineNum, 'VARTTAI variables must be assigned string values in quotes');\n        }\n      }\n    }\n  }\n  validatePrintStatement(line, lineNum) {\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'CHATIMPU statement must end with semicolon');\n    }\n    const match = line.match(/^CHATIMPU\\((.+)\\);?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid CHATIMPU syntax');\n      return;\n    }\n    const param = match[1].trim();\n    if (!(param.startsWith('\"') && param.endsWith('\"'))) {\n      if (!this.variables.has(param)) {\n        this.addError(lineNum, `Variable '${param}' used before declaration`);\n      }\n    }\n  }\n  validateInputStatement(line, lineNum) {\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'CHEPPU statement must end with semicolon');\n    }\n    const match = line.match(/^CHEPPU\\(([a-zA-Z][a-zA-Z0-9_]*)\\);?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid CHEPPU syntax');\n      return;\n    }\n    const varName = match[1];\n    if (!this.variables.has(varName)) {\n      this.addError(lineNum, `Variable '${varName}' used before declaration`);\n    }\n  }\n  validateConditional(line, lineNum) {\n    const match = line.match(/^ELAITHE\\s+\\((.+)\\)\\s+\\[$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid ELAITHE syntax. Should be: ELAITHE (condition) [');\n      return;\n    }\n    const condition = match[1];\n    this.validateCondition(condition, lineNum);\n  }\n  validateLoop(line, lineNum) {\n    const match = line.match(/^MALLI-MALLI\\s+\\((.+)\\)\\s+\\[$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid MALLI-MALLI syntax');\n      return;\n    }\n    const loopCondition = match[1];\n    const parts = loopCondition.split(';').map(p => p.trim());\n    if (parts.length !== 3) {\n      this.addError(lineNum, 'MALLI-MALLI must have three parts separated by semicolons');\n      return;\n    }\n    if (!parts[0].startsWith('PADAM ')) {\n      this.addError(lineNum, 'Loop initialization must declare a variable with PADAM');\n    }\n  }\n  validateAssignment(line, lineNum) {\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'Assignment statement must end with semicolon');\n    }\n    const match = line.match(/^([a-zA-Z][a-zA-Z0-9_]*)\\s*=\\s*(.+);?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid assignment syntax');\n      return;\n    }\n    const [, varName] = match;\n    if (!this.variables.has(varName)) {\n      this.addError(lineNum, `Variable '${varName}' used before declaration`);\n    }\n  }\n  validateCondition(condition, lineNum) {\n    const operators = ['==', '!=', '<=', '>=', '<', '>'];\n    let foundOperator = false;\n    for (const op of operators) {\n      if (condition.includes(op)) {\n        foundOperator = true;\n        break;\n      }\n    }\n    if (!foundOperator) {\n      this.addError(lineNum, 'Condition must use valid comparison operators (==, !=, <, >, <=, >=)');\n    }\n  }\n  addError(lineNum, message) {\n    this.errors.push({\n      line: lineNum,\n      message\n    });\n  }\n}\nexport default YantraBhashiValidator;","map":{"version":3,"names":["YantraBhashiValidator","constructor","variables","Map","errors","reservedWords","DATA_TYPES","preprocessCode","code","split","map","line","trim","filter","startsWith","replace","validate","clear","lines","i","length","validateLine","isValid","lineNum","validateVariableDeclaration","validatePrintStatement","validateInputStatement","validateConditional","validateLoop","includes","validateAssignment","addError","match","varName","dataType","initialValue","endsWith","set","type","declared","trimmedVal","slice","test","param","has","condition","validateCondition","loopCondition","parts","p","operators","foundOperator","op","message","push"],"sources":["/Users/kedardalvi/Documents/SSD/SSD Hackathon/Dev/YantraBhashi_Team_4_SSD/frontend/src/services/validator.js"],"sourcesContent":["class YantraBhashiValidator {\n  constructor() {\n    this.variables = new Map();\n    this.errors = [];\n    this.reservedWords = [\n      // Add your reserved words here if any\n    ];\n    this.DATA_TYPES = ['ANKHE', 'VARTTAI'];\n  }\n\n  preprocessCode(code) {\n    return code\n      .split('\\n')\n      .map(line => line.trim())\n      .filter(line => line && !line.startsWith('#'))\n      .map(line => line.replace(/^\\d+\\.\\s*/, '')); // Strip line numbers like \"1. \"\n  }\n\n  validate(code) {\n    this.variables.clear();\n    this.errors = [];\n    const lines = this.preprocessCode(code);\n\n    for (let i = 0; i < lines.length; i++) {\n      this.validateLine(lines[i], i + 1);\n    }\n\n    return {\n      isValid: this.errors.length === 0,\n      errors: this.errors,\n    };\n  }\n\n  validateLine(line, lineNum) {\n    if (line.startsWith('PADAM ')) {\n      this.validateVariableDeclaration(line, lineNum);\n    } else if (line.startsWith('CHATIMPU(')) {\n      this.validatePrintStatement(line, lineNum);\n    } else if (line.startsWith('CHEPPU(')) {\n      this.validateInputStatement(line, lineNum);\n    } else if (line.startsWith('ELAITHE ')) {\n      this.validateConditional(line, lineNum);\n    } else if (line.startsWith('MALLI-MALLI ')) {\n      this.validateLoop(line, lineNum);\n    } else if (line.includes(' = ') && !line.startsWith('PADAM ')) {\n      this.validateAssignment(line, lineNum);\n    } else if (line === ']' || line === '] ALAITHE [') {\n      // Valid block markers - no error\n    } else if (line.trim() !== '') {\n      this.addError(lineNum, `Unknown statement: ${line}`);\n    }\n  }\n\n  validateVariableDeclaration(line, lineNum) {\n    const match = line.match(/^PADAM\\s+([a-zA-Z][a-zA-Z0-9_]*):([A-Z]+)(?:\\s*=\\s*(.+))?;?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid variable declaration syntax');\n      return;\n    }\n\n    const [, varName, dataType, initialValue] = match;\n\n    if (this.reservedWords.includes(varName)) {\n      this.addError(lineNum, `Cannot use reserved word '${varName}' as variable name`);\n      return;\n    }\n\n    if (!this.DATA_TYPES.includes(dataType)) {\n      this.addError(lineNum, `Invalid data type '${dataType}'. Use ANKHE for integers or VARTTAI for strings`);\n      return;\n    }\n\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'Variable declaration must end with semicolon');\n    }\n\n    this.variables.set(varName, { type: dataType, declared: true });\n\n    if (typeof initialValue !== 'undefined') {\n      let trimmedVal = initialValue.trim();\n      if (trimmedVal.endsWith(';')) trimmedVal = trimmedVal.slice(0, -1).trim();\n\n      if (dataType === 'ANKHE' && !/^-?\\d+$/.test(trimmedVal)) {\n        this.addError(lineNum, 'ANKHE variables can only be assigned integer values');\n      }\n\n      if (dataType === 'VARTTAI') {\n        if (!(trimmedVal.startsWith('\"') && trimmedVal.endsWith('\"'))) {\n          this.addError(lineNum, 'VARTTAI variables must be assigned string values in quotes');\n        }\n      }\n    }\n  }\n\n  validatePrintStatement(line, lineNum) {\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'CHATIMPU statement must end with semicolon');\n    }\n\n    const match = line.match(/^CHATIMPU\\((.+)\\);?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid CHATIMPU syntax');\n      return;\n    }\n\n    const param = match[1].trim();\n    if (!(param.startsWith('\"') && param.endsWith('\"'))) {\n      if (!this.variables.has(param)) {\n        this.addError(lineNum, `Variable '${param}' used before declaration`);\n      }\n    }\n  }\n\n  validateInputStatement(line, lineNum) {\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'CHEPPU statement must end with semicolon');\n    }\n\n    const match = line.match(/^CHEPPU\\(([a-zA-Z][a-zA-Z0-9_]*)\\);?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid CHEPPU syntax');\n      return;\n    }\n\n    const varName = match[1];\n    if (!this.variables.has(varName)) {\n      this.addError(lineNum, `Variable '${varName}' used before declaration`);\n    }\n  }\n\n  validateConditional(line, lineNum) {\n    const match = line.match(/^ELAITHE\\s+\\((.+)\\)\\s+\\[$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid ELAITHE syntax. Should be: ELAITHE (condition) [');\n      return;\n    }\n\n    const condition = match[1];\n    this.validateCondition(condition, lineNum);\n  }\n\n  validateLoop(line, lineNum) {\n    const match = line.match(/^MALLI-MALLI\\s+\\((.+)\\)\\s+\\[$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid MALLI-MALLI syntax');\n      return;\n    }\n\n    const loopCondition = match[1];\n    const parts = loopCondition.split(';').map(p => p.trim());\n\n    if (parts.length !== 3) {\n      this.addError(lineNum, 'MALLI-MALLI must have three parts separated by semicolons');\n      return;\n    }\n\n    if (!parts[0].startsWith('PADAM ')) {\n      this.addError(lineNum, 'Loop initialization must declare a variable with PADAM');\n    }\n  }\n\n  validateAssignment(line, lineNum) {\n    if (!line.endsWith(';')) {\n      this.addError(lineNum, 'Assignment statement must end with semicolon');\n    }\n\n    const match = line.match(/^([a-zA-Z][a-zA-Z0-9_]*)\\s*=\\s*(.+);?$/);\n    if (!match) {\n      this.addError(lineNum, 'Invalid assignment syntax');\n      return;\n    }\n\n    const [, varName] = match;\n    if (!this.variables.has(varName)) {\n      this.addError(lineNum, `Variable '${varName}' used before declaration`);\n    }\n  }\n\n  validateCondition(condition, lineNum) {\n    const operators = ['==', '!=', '<=', '>=', '<', '>'];\n    let foundOperator = false;\n\n    for (const op of operators) {\n      if (condition.includes(op)) {\n        foundOperator = true;\n        break;\n      }\n    }\n\n    if (!foundOperator) {\n      this.addError(lineNum, 'Condition must use valid comparison operators (==, !=, <, >, <=, >=)');\n    }\n  }\n\n  addError(lineNum, message) {\n    this.errors.push({ line: lineNum, message });\n  }\n}\n\nexport default YantraBhashiValidator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}