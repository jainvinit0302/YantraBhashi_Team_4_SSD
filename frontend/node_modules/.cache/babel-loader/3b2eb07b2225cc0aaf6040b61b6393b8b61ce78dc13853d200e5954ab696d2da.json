{"ast":null,"code":"const mockAPI = {\n  users: [{\n    username: 'admin',\n    password: 'admin123',\n    role: 'admin'\n  }, {\n    username: 'student1',\n    password: 'pass123',\n    role: 'student'\n  }],\n  submissions: [],\n  async signup(username, password) {\n    const existingUser = this.users.find(u => u.username === username);\n    if (existingUser) throw new Error('Username already exists');\n    this.users.push({\n      username,\n      password,\n      role: 'student'\n    });\n    return {\n      success: true\n    };\n  },\n  async login(username, password) {\n    const user = this.users.find(u => u.username === username && u.password === password);\n    if (!user) throw new Error('Invalid credentials');\n    return user;\n  },\n  async submitCode(userId, code, status, output, errors) {\n    const submission = {\n      id: Date.now(),\n      userId,\n      code,\n      status,\n      output,\n      errors,\n      timestamp: new Date().toISOString()\n    };\n    this.submissions.push(submission);\n    return submission;\n  },\n  async getSubmissions(userId = null) {\n    return userId ? this.submissions.filter(s => s.userId === userId) : this.submissions;\n  }\n};\nexport default mockAPI;","map":{"version":3,"names":["mockAPI","users","username","password","role","submissions","signup","existingUser","find","u","Error","push","success","login","user","submitCode","userId","code","status","output","errors","submission","id","Date","now","timestamp","toISOString","getSubmissions","filter","s"],"sources":["/Users/vinitjain/Desktop/yantrabhashi-app/frontend/src/services/mockAPI.js"],"sourcesContent":["const mockAPI = {\n  users: [\n    { username: 'admin', password: 'admin123', role: 'admin' },\n    { username: 'student1', password: 'pass123', role: 'student' }\n  ],\n  submissions: [],\n\n  async signup(username, password) {\n    const existingUser = this.users.find(u => u.username === username);\n    if (existingUser) throw new Error('Username already exists');\n    \n    this.users.push({ username, password, role: 'student' });\n    return { success: true };\n  },\n\n  async login(username, password) {\n    const user = this.users.find(u => u.username === username && u.password === password);\n    if (!user) throw new Error('Invalid credentials');\n    return user;\n  },\n\n  async submitCode(userId, code, status, output, errors) {\n    const submission = {\n      id: Date.now(),\n      userId,\n      code,\n      status,\n      output,\n      errors,\n      timestamp: new Date().toISOString()\n    };\n    this.submissions.push(submission);\n    return submission;\n  },\n\n  async getSubmissions(userId = null) {\n    return userId ? this.submissions.filter(s => s.userId === userId) : this.submissions;\n  }\n};\n\nexport default mockAPI;"],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACdC,KAAK,EAAE,CACL;IAAEC,QAAQ,EAAE,OAAO;IAAEC,QAAQ,EAAE,UAAU;IAAEC,IAAI,EAAE;EAAQ,CAAC,EAC1D;IAAEF,QAAQ,EAAE,UAAU;IAAEC,QAAQ,EAAE,SAAS;IAAEC,IAAI,EAAE;EAAU,CAAC,CAC/D;EACDC,WAAW,EAAE,EAAE;EAEf,MAAMC,MAAMA,CAACJ,QAAQ,EAAEC,QAAQ,EAAE;IAC/B,MAAMI,YAAY,GAAG,IAAI,CAACN,KAAK,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,QAAQ,KAAKA,QAAQ,CAAC;IAClE,IAAIK,YAAY,EAAE,MAAM,IAAIG,KAAK,CAAC,yBAAyB,CAAC;IAE5D,IAAI,CAACT,KAAK,CAACU,IAAI,CAAC;MAAET,QAAQ;MAAEC,QAAQ;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC;IACxD,OAAO;MAAEQ,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC;EAED,MAAMC,KAAKA,CAACX,QAAQ,EAAEC,QAAQ,EAAE;IAC9B,MAAMW,IAAI,GAAG,IAAI,CAACb,KAAK,CAACO,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,QAAQ,KAAKA,QAAQ,IAAIO,CAAC,CAACN,QAAQ,KAAKA,QAAQ,CAAC;IACrF,IAAI,CAACW,IAAI,EAAE,MAAM,IAAIJ,KAAK,CAAC,qBAAqB,CAAC;IACjD,OAAOI,IAAI;EACb,CAAC;EAED,MAAMC,UAAUA,CAACC,MAAM,EAAEC,IAAI,EAAEC,MAAM,EAAEC,MAAM,EAAEC,MAAM,EAAE;IACrD,MAAMC,UAAU,GAAG;MACjBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACdR,MAAM;MACNC,IAAI;MACJC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNK,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACG,WAAW,CAAC;IACpC,CAAC;IACD,IAAI,CAACrB,WAAW,CAACM,IAAI,CAACU,UAAU,CAAC;IACjC,OAAOA,UAAU;EACnB,CAAC;EAED,MAAMM,cAAcA,CAACX,MAAM,GAAG,IAAI,EAAE;IAClC,OAAOA,MAAM,GAAG,IAAI,CAACX,WAAW,CAACuB,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACb,MAAM,KAAKA,MAAM,CAAC,GAAG,IAAI,CAACX,WAAW;EACtF;AACF,CAAC;AAED,eAAeL,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}