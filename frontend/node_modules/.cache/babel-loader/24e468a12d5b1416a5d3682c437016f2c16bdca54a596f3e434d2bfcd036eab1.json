{"ast":null,"code":"var _jsxFileName = \"/Users/vinitjain/Desktop/yantrabhashi-app/frontend/src/components/compiler/CompilerInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from '../common/Header';\nimport CodeEditor from './CodeEditor';\nimport OutputPanel from './OutputPanel';\nimport YantraBhashiValidator from '../../services/validator';\nimport mockAPI from '../../services/mockAPI';\nimport '../../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompilerInterface = ({\n  user,\n  onLogout\n}) => {\n  _s();\n  const [code, setCode] = useState(`# Hello World program\nPADAM message:VARTTAI = \"Hello World\";\nCHATIMPU(message);`);\n  const [output, setOutput] = useState('');\n  const [isRunning, setIsRunning] = useState(false);\n  const runCode = async () => {\n    setIsRunning(true);\n    const validator = new YantraBhashiValidator();\n    const result = validator.validate(code);\n    let outputText = '';\n    let status = 'success';\n    let errors = [];\n    if (!result.isValid) {\n      status = 'error';\n      errors = result.errors;\n      outputText = 'Compilation Errors:\\n' + result.errors.map(err => `Line ${err.line}: ${err.message}`).join('\\n');\n    } else {\n      outputText = 'Code compiled successfully!\\nOutput:\\nHello World';\n    }\n    setOutput(outputText);\n    try {\n      // Call backend submit API\n      await fetch('http://localhost:4000/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userId,\n          // or user.userId, make sure this is not undefined!\n          code,\n          status,\n          output: status === 'success' ? outputText : '',\n          errors\n        })\n      });\n    } catch (error) {\n      console.error('Error submitting code:', error);\n    }\n    setIsRunning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"YantraBhashi Compiler\",\n      user: user,\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        code: code,\n        setCode: setCode,\n        onRun: runCode,\n        isRunning: isRunning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OutputPanel, {\n        output: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(CompilerInterface, \"RQOknoAWJIQgUMoMoKgHlF+QG/U=\");\n_c = CompilerInterface;\nexport default CompilerInterface;\nvar _c;\n$RefreshReg$(_c, \"CompilerInterface\");","map":{"version":3,"names":["React","useState","Header","CodeEditor","OutputPanel","YantraBhashiValidator","mockAPI","jsxDEV","_jsxDEV","CompilerInterface","user","onLogout","_s","code","setCode","output","setOutput","isRunning","setIsRunning","runCode","validator","result","validate","outputText","status","errors","isValid","map","err","line","message","join","fetch","method","headers","body","JSON","stringify","userId","error","console","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onRun","_c","$RefreshReg$"],"sources":["/Users/vinitjain/Desktop/yantrabhashi-app/frontend/src/components/compiler/CompilerInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Header from '../common/Header';\nimport CodeEditor from './CodeEditor';\nimport OutputPanel from './OutputPanel';\nimport YantraBhashiValidator from '../../services/validator';\nimport mockAPI from '../../services/mockAPI';\nimport  '../../styles/components.css';  \n\n\nconst CompilerInterface = ({ user, onLogout }) => {\n  const [code, setCode] = useState(`# Hello World program\nPADAM message:VARTTAI = \"Hello World\";\nCHATIMPU(message);`);\n  const [output, setOutput] = useState('');\n  const [isRunning, setIsRunning] = useState(false);\n\n  const runCode = async () => {\n  setIsRunning(true);\n  const validator = new YantraBhashiValidator();\n  const result = validator.validate(code);\n\n  let outputText = '';\n  let status = 'success';\n  let errors = [];\n\n  if (!result.isValid) {\n    status = 'error';\n    errors = result.errors;\n    outputText = 'Compilation Errors:\\n' + result.errors.map(err => `Line ${err.line}: ${err.message}`).join('\\n');\n  } else {\n    outputText = 'Code compiled successfully!\\nOutput:\\nHello World';\n  }\n\n  setOutput(outputText);\n\n  try {\n    // Call backend submit API\n    await fetch('http://localhost:4000/submit', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    userId: userId, // or user.userId, make sure this is not undefined!\n    code,\n    status,\n    output: status === 'success' ? outputText : '',\n    errors,\n  }),\n});\n  } catch (error) {\n    console.error('Error submitting code:', error);\n  }\n\n  setIsRunning(false);\n};\n\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <Header \n        title=\"YantraBhashi Compiler\" \n        user={user} \n        onLogout={onLogout} \n      />\n      \n      <div className=\"flex h-screen\">\n        <CodeEditor \n          code={code}\n          setCode={setCode}\n          onRun={runCode}\n          isRunning={isRunning}\n        />\n        <OutputPanel output={output} />\n      </div>\n    </div>\n  );\n};\n\nexport default CompilerInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}