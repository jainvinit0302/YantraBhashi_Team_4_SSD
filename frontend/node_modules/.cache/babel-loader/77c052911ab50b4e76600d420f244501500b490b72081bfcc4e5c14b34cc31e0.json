{"ast":null,"code":"var _jsxFileName = \"/Users/vinitjain/Desktop/yantrabhashi-app/frontend/src/components/compiler/CompilerInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Header from '../common/Header';\nimport CodeEditor from './CodeEditor';\nimport OutputPanel from './OutputPanel';\nimport YantraBhashiValidator from '../../services/validator';\n// import mockAPI from '../../services/mockAPI';\nimport '../../styles/components.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompilerInterface = ({\n  user,\n  onLogout\n}) => {\n  _s();\n  const [code, setCode] = useState(`PADAM message:VARTTAI = \"Hello World\";\nCHATIMPU(message);`);\n  const [output, setOutput] = useState('');\n  const [isRunning, setIsRunning] = useState(false);\n  const runCode = async () => {\n    setIsRunning(true);\n    const validator = new YantraBhashiValidator();\n    const result = validator.validate(code);\n    let outputText = '';\n    let status = 'success';\n    let errors = [];\n    const variables = {};\n    if (!result.isValid) {\n      status = 'error';\n      errors = result.errors;\n      outputText = 'Compilation Errors:\\n' + result.errors.map(err => `Line ${err.line}: ${err.message}`).join('\\n');\n    } else {\n      // Parse declared VARTTAI variables with string values\n      const lines = code.split('\\n');\n      for (const line of lines) {\n        const varDeclMatch = line.match(/^PADAM\\s+([a-zA-Z][a-zA-Z0-9_]*):VARTTAI\\s*=\\s*\"(.*)\"\\s*;?$/);\n        if (varDeclMatch) {\n          variables[varDeclMatch[1]] = varDeclMatch[2];\n        }\n      }\n\n      // Process CHATIMPU print statements with variable substitution\n      for (const line of lines) {\n        const printMatch = line.match(/^CHATIMPU\\((.+)\\);?$/);\n        if (printMatch) {\n          let toPrint = printMatch[1].trim();\n          if (toPrint.startsWith('\"') && toPrint.endsWith('\"')) {\n            toPrint = toPrint.slice(1, -1);\n          } else if (variables[toPrint] !== undefined) {\n            toPrint = variables[toPrint];\n          } else {\n            toPrint = `[Undefined variable: ${toPrint}]`;\n          }\n          outputText += toPrint + '\\n';\n        }\n      }\n    }\n    setOutput(outputText.trim());\n    try {\n      await fetch('http://localhost:4000/submit', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: user.userId,\n          code,\n          status,\n          output: status === 'success' ? outputText : '',\n          errors\n        })\n      });\n    } catch (error) {\n      console.error('Error submitting code:', error);\n    }\n    setIsRunning(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"YantraBhashi Compiler\",\n      user: user,\n      onLogout: onLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex h-screen\",\n      children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n        code: code,\n        setCode: setCode,\n        onRun: runCode,\n        isRunning: isRunning\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OutputPanel, {\n        output: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(CompilerInterface, \"zBpibV/9+yOw2icadDAxEMf3Oow=\");\n_c = CompilerInterface;\nexport default CompilerInterface;\nvar _c;\n$RefreshReg$(_c, \"CompilerInterface\");","map":{"version":3,"names":["React","useState","Header","CodeEditor","OutputPanel","YantraBhashiValidator","jsxDEV","_jsxDEV","CompilerInterface","user","onLogout","_s","code","setCode","output","setOutput","isRunning","setIsRunning","runCode","validator","result","validate","outputText","status","errors","variables","isValid","map","err","line","message","join","lines","split","varDeclMatch","match","printMatch","toPrint","trim","startsWith","endsWith","slice","undefined","fetch","method","headers","body","JSON","stringify","userId","error","console","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","onRun","_c","$RefreshReg$"],"sources":["/Users/vinitjain/Desktop/yantrabhashi-app/frontend/src/components/compiler/CompilerInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Header from '../common/Header';\nimport CodeEditor from './CodeEditor';\nimport OutputPanel from './OutputPanel';\nimport YantraBhashiValidator from '../../services/validator';\n// import mockAPI from '../../services/mockAPI';\nimport '../../styles/components.css';\n\nconst CompilerInterface = ({ user, onLogout }) => {\n  const [code, setCode] = useState(`PADAM message:VARTTAI = \"Hello World\";\nCHATIMPU(message);`);\n  const [output, setOutput] = useState('');\n  const [isRunning, setIsRunning] = useState(false);\n\n  const runCode = async () => {\n    setIsRunning(true);\n\n    const validator = new YantraBhashiValidator();\n    const result = validator.validate(code);\n\n    let outputText = '';\n    let status = 'success';\n    let errors = [];\n\n    const variables = {};\n\n    if (!result.isValid) {\n      status = 'error';\n      errors = result.errors;\n      outputText = 'Compilation Errors:\\n' + result.errors.map(err => `Line ${err.line}: ${err.message}`).join('\\n');\n    } else {\n      // Parse declared VARTTAI variables with string values\n      const lines = code.split('\\n');\n      for (const line of lines) {\n        const varDeclMatch = line.match(/^PADAM\\s+([a-zA-Z][a-zA-Z0-9_]*):VARTTAI\\s*=\\s*\"(.*)\"\\s*;?$/);\n        if (varDeclMatch) {\n          variables[varDeclMatch[1]] = varDeclMatch[2];\n        }\n      }\n\n      // Process CHATIMPU print statements with variable substitution\n      for (const line of lines) {\n        const printMatch = line.match(/^CHATIMPU\\((.+)\\);?$/);\n        if (printMatch) {\n          let toPrint = printMatch[1].trim();\n          if (toPrint.startsWith('\"') && toPrint.endsWith('\"')) {\n            toPrint = toPrint.slice(1, -1);\n          } else if (variables[toPrint] !== undefined) {\n            toPrint = variables[toPrint];\n          } else {\n            toPrint = `[Undefined variable: ${toPrint}]`;\n          }\n          outputText += toPrint + '\\n';\n        }\n      }\n    }\n\n    setOutput(outputText.trim());\n\n    try {\n      await fetch('http://localhost:4000/submit', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          userId: user.userId,\n          code,\n          status,\n          output: status === 'success' ? outputText : '',\n          errors,\n        }),\n      });\n    } catch (error) {\n      console.error('Error submitting code:', error);\n    }\n\n    setIsRunning(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <Header \n        title=\"YantraBhashi Compiler\" \n        user={user} \n        onLogout={onLogout} \n      />\n      \n      <div className=\"flex h-screen\">\n        <CodeEditor \n          code={code}\n          setCode={setCode}\n          onRun={runCode}\n          isRunning={isRunning}\n        />\n        <OutputPanel output={output} />\n      </div>\n    </div>\n  );\n};\n\nexport default CompilerInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}