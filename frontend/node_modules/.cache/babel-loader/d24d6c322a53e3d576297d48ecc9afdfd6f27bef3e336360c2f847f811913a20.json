{"ast":null,"code":"import React, { useState } from 'react';\nimport Header from '../common/Header';\nimport CodeEditor from './CodeEditor';\nimport OutputPanel from './OutputPanel';\nimport YantraBhashiValidator from '../../services/validator';\nimport mockAPI from '../../services/mockAPI';\nimport '../../styles/components.css';\nconst runCode = async () => {\n  setIsRunning(true);\n  const validator = new YantraBhashiValidator();\n  const result = validator.validate(code);\n  let outputText = '';\n  let status = 'success';\n  let errors = [];\n  const variables = {};\n  if (!result.isValid) {\n    status = 'error';\n    errors = result.errors;\n    outputText = 'Compilation Errors:\\n' + result.errors.map(err => `Line ${err.line}: ${err.message}`).join('\\n');\n  } else {\n    // Parse declared VARTTAI variables with string values\n    const lines = code.split('\\n');\n    for (const line of lines) {\n      const varDeclMatch = line.match(/^PADAM\\s+([a-zA-Z][a-zA-Z0-9_]*):VARTTAI\\s*=\\s*\"(.*)\"\\s*;?$/);\n      if (varDeclMatch) {\n        variables[varDeclMatch[1]] = varDeclMatch[2];\n      }\n    }\n\n    // Process CHATIMPU print statements with variable substitution\n    for (const line of lines) {\n      const printMatch = line.match(/^CHATIMPU\\((.+)\\);?$/);\n      if (printMatch) {\n        let toPrint = printMatch[1].trim();\n        if (toPrint.startsWith('\"') && toPrint.endsWith('\"')) {\n          toPrint = toPrint.slice(1, -1);\n        } else if (variables[toPrint] !== undefined) {\n          toPrint = variables[toPrint];\n        } else {\n          toPrint = `[Undefined variable: ${toPrint}]`;\n        }\n        outputText += toPrint + '\\n';\n      }\n    }\n  }\n  setOutput(outputText.trim());\n  try {\n    // Keep your existing API call as-is\n    await fetch('http://localhost:4000/submit', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId: user.userId,\n        code,\n        status,\n        output: status === 'success' ? outputText : '',\n        errors\n      })\n    });\n  } catch (error) {\n    console.error('Error submitting code:', error);\n  }\n  setIsRunning(false);\n};\nexport default CompilerInterface;","map":{"version":3,"names":["React","useState","Header","CodeEditor","OutputPanel","YantraBhashiValidator","mockAPI","runCode","setIsRunning","validator","result","validate","code","outputText","status","errors","variables","isValid","map","err","line","message","join","lines","split","varDeclMatch","match","printMatch","toPrint","trim","startsWith","endsWith","slice","undefined","setOutput","fetch","method","headers","body","JSON","stringify","userId","user","output","error","console","CompilerInterface"],"sources":["/Users/vinitjain/Desktop/yantrabhashi-app/frontend/src/components/compiler/CompilerInterface.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Header from '../common/Header';\nimport CodeEditor from './CodeEditor';\nimport OutputPanel from './OutputPanel';\nimport YantraBhashiValidator from '../../services/validator';\nimport mockAPI from '../../services/mockAPI';\nimport  '../../styles/components.css';  \n\n\nconst runCode = async () => {\n  setIsRunning(true);\n\n  const validator = new YantraBhashiValidator();\n  const result = validator.validate(code);\n\n  let outputText = '';\n  let status = 'success';\n  let errors = [];\n\n  const variables = {};\n\n  if (!result.isValid) {\n    status = 'error';\n    errors = result.errors;\n    outputText = 'Compilation Errors:\\n' + result.errors.map(err => `Line ${err.line}: ${err.message}`).join('\\n');\n  } else {\n    // Parse declared VARTTAI variables with string values\n    const lines = code.split('\\n');\n    for (const line of lines) {\n      const varDeclMatch = line.match(/^PADAM\\s+([a-zA-Z][a-zA-Z0-9_]*):VARTTAI\\s*=\\s*\"(.*)\"\\s*;?$/);\n      if (varDeclMatch) {\n        variables[varDeclMatch[1]] = varDeclMatch[2];\n      }\n    }\n\n    // Process CHATIMPU print statements with variable substitution\n    for (const line of lines) {\n      const printMatch = line.match(/^CHATIMPU\\((.+)\\);?$/);\n      if (printMatch) {\n        let toPrint = printMatch[1].trim();\n        if (toPrint.startsWith('\"') && toPrint.endsWith('\"')) {\n          toPrint = toPrint.slice(1, -1);\n        } else if (variables[toPrint] !== undefined) {\n          toPrint = variables[toPrint];\n        } else {\n          toPrint = `[Undefined variable: ${toPrint}]`;\n        }\n        outputText += toPrint + '\\n';\n      }\n    }\n  }\n\n  setOutput(outputText.trim());\n\n  try {\n    // Keep your existing API call as-is\n    await fetch('http://localhost:4000/submit', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        userId: user.userId,\n        code,\n        status,\n        output: status === 'success' ? outputText : '',\n        errors,\n      }),\n    });\n  } catch (error) {\n    console.error('Error submitting code:', error);\n  }\n\n  setIsRunning(false);\n};\n\n\nexport default CompilerInterface;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}